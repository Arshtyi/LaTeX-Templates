name: Auto Merge New Templates

on:
    push:
        branches:
            - develop

jobs:
    auto-merge:
        runs-on: ubuntu-latest
        permissions:
            contents: write
            pull-requests: write

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ github.token }}

            - name: Check commit message for template addition
              id: check_template_commit
              run: |
                  COMMIT_MSG=$(git log -1 --pretty=%B)
                  if [[ "${COMMIT_MSG,,}" == "add a new template"* ]]; then
                    echo "Detected new template commit: $COMMIT_MSG"
                    echo "is_template_commit=true" >> $GITHUB_OUTPUT
                    echo "commit_subject=$(echo "$COMMIT_MSG" | head -n 1)" >> $GITHUB_OUTPUT
                  else
                    echo "Not a new template commit, skipping merge: $COMMIT_MSG"
                    echo "is_template_commit=false" >> $GITHUB_OUTPUT
                  fi

            - name: Exit if not a template commit
              if: steps.check_template_commit.outputs.is_template_commit != 'true'
              run: |
                  echo "Commit message does not indicate a new template, workflow ending normally."
                  exit 0

            - name: Create and Merge PR
              if: steps.check_template_commit.outputs.is_template_commit == 'true'
              uses: actions/github-script@v7
              with:
                  github-token: ${{ secrets.AUTOMERGE }}
                  script: |
                      const commitSubject = '${{ steps.check_template_commit.outputs.commit_subject }}';
                      try {
                        console.log(`Creating PR from develop to main for commit: ${commitSubject}`);
                        const pr = await github.rest.pulls.create({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          title: `Merge new template: ${commitSubject}`,
                          body: `Automatically merging new template commit from develop to main:\n\n${commitSubject}`,
                          head: 'develop',
                          base: 'main'
                        });
                        const prNumber = pr.data.number;
                        console.log(`Successfully created PR #${prNumber}`);
                        console.log(`Merging PR #${prNumber}`);
                        try {
                          await github.rest.pulls.merge({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            pull_number: prNumber,
                            merge_method: 'merge'
                          });
                          console.log(`PR #${prNumber} successfully merged`);
                        } catch (error) {
                          console.log(`PR merge failed: ${error.message}, attempting direct push fallback.`);
                          throw new Error('PR merge failed, will proceed with force push step.');
                        }
                      } catch (error) {
                        console.error(`Operation failed: ${error.message}`);
                        core.setFailed(error.message);
                      }

            - name: Force push if PR fails
              if: steps.check_template_commit.outputs.is_template_commit == 'true' && failure()
              run: |
                  git config --global user.name "GitHub Actions"
                  git config --global user.email "actions@github.com"
                  echo "https://${{ secrets.AUTOMERGE }}@github.com" > ~/.git-credentials
                  git config --global credential.helper store
                  git fetch origin main
                  git checkout main
                  git reset --hard origin/develop
                  git push --force origin main
                  echo "Successfully merged develop into main via force push."
